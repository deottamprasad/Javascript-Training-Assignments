let userNames = [{
"id": 1,
"first_name": "Nicki",
}, {
"id": 2,
"first_name": "Raychel",
}, {
"id": 3,
"first_name": "Demetris",
}, {
"id": 4,
"first_name": "Amata",
}]
let userEmails = [{
"id": 2,
"email": "rmcgrady1@cpanel.net",
}, {
"id": 1,
"email": "ncrozier0@squarespace.com",
}, {
"id": 4,
"email": "abraiden3@canalblog.com",
}, {
"id": 3,
"email": "dkilshall2@elpais.com",
}]

function mergeById(userNames, userEmails) {
 let userEmailsTemp = userEmails.map((item) => ({[item["id"]]:item}));
 userEmailsTemp = Object.assign({},...userEmailsTemp);
 return userNames.map((item) => 
  Object.assign({},item,userEmailsTemp[item["id"]]))
}
 
console.log(mergeById(userNames, userEmails));
/* Output :-
0: {id: 1, first_name: 'Nicki', email: 'ncrozier0@squarespace.com'}
1: {id: 2, first_name: 'Raychel', email: 'rmcgrady1@cpanel.net'}
2: {id: 3, first_name: 'Demetris', email: 'dkilshall2@elpais.com'}
3: {id: 4, first_name: 'Amata', email: 'abraiden3@canalblog.com'}
length: 4
*/

//So, we can see I have created an array of objects by mapping userEmails by using their "id" key and then converting this array into object of objects. After then I mapped userNames array by merging each element of userNames with the object in the userEmails specified by the userNames["id"] key in userEmails.